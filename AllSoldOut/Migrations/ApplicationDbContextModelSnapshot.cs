// <auto-generated />
using System;
using AllSoldOut.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AllSoldOut.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            modelBuilder.Entity<Cart>(
            eb =>
            {
                eb.HasNoKey();

            });

            modelBuilder.Entity("AllSoldOut.Models.Cart", b =>
                {
                    b.Property<string>("guid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<string>("productImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("productPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("total")
                        .HasColumnType("decimal(18,2)");

                    b.HasNoKey();

                    b.ToTable("carts");
                });

            modelBuilder.Entity("AllSoldOut.Models.CartItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("guid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("cartItems");
                });

            modelBuilder.Entity("AllSoldOut.Models.Customer", b =>
                {
                    b.Property<int>("customerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("contact")
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("salesId")
                        .HasColumnType("int");

                    b.HasKey("customerId");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("AllSoldOut.Models.PhoneMaker", b =>
                {
                    b.Property<string>("makerName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PhoneCreateViewModelproductId")
                        .HasColumnType("int");

                    b.Property<string>("makerCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("makerId")
                        .HasColumnType("int");

                    b.HasKey("makerName");

                    b.HasIndex("PhoneCreateViewModelproductId");

                    b.ToTable("phoneMakers");

                    b.HasData(
                        new
                        {
                            makerName = "Apple",
                            makerCategory = "Iphone",
                            makerId = 1
                        },
                        new
                        {
                            makerName = "Samsung",
                            makerCategory = "Android",
                            makerId = 2
                        },
                        new
                        {
                            makerName = "Tecno",
                            makerCategory = "Android",
                            makerId = 3
                        },
                        new
                        {
                            makerName = "Infinix",
                            makerCategory = "Android",
                            makerId = 4
                        },
                        new
                        {
                            makerName = "Itel",
                            makerCategory = "Android",
                            makerId = 5
                        },
                        new
                        {
                            makerName = "Nokia",
                            makerCategory = "Android",
                            makerId = 6
                        });
                });

            modelBuilder.Entity("AllSoldOut.Models.Product", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("available")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("inStock")
                        .HasColumnType("int");

                    b.Property<string>("productCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("productImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("productPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("quantityAvailable")
                        .HasColumnType("int");

                    b.HasKey("productId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("AllSoldOut.Models.Role", b =>
                {
                    b.Property<int>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("roleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleId");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            roleId = 1,
                            roleName = "Admin"
                        },
                        new
                        {
                            roleId = 2,
                            roleName = "Customer"
                        });
                });

            modelBuilder.Entity("AllSoldOut.Models.Sales", b =>
                {
                    b.Property<int>("salesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<string>("paymentPlatform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<decimal>("quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("salesDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("salesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("salesId");

                    b.ToTable("sales");
                });

            modelBuilder.Entity("AllSoldOut.Models.Specifications", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("batteryStandbyTime")
                        .HasColumnType("float");

                    b.Property<string>("bodyDimension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bodyWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("camera")
                        .HasColumnType("float");

                    b.Property<string>("displayResolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("displaySize")
                        .HasColumnType("float");

                    b.Property<double>("internalMemory")
                        .HasColumnType("float");

                    b.Property<DateTime>("launchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("platformOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ram")
                        .HasColumnType("float");

                    b.HasKey("productId");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("AllSoldOut.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.HasKey("userId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("AllSoldOut.ViewModel.CheckoutViewModel", b =>
                {
                    b.Property<int>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cartguid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("customerId")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("orderId");

                    b.HasIndex("cartguid");

                    b.HasIndex("customerId");

                    b.HasIndex("userId");

                    b.ToTable("CheckoutViewModel");
                });

            modelBuilder.Entity("AllSoldOut.ViewModel.PhoneCreateViewModel", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("productsproductId")
                        .HasColumnType("int");

                    b.Property<int?>("specificationsproductId")
                        .HasColumnType("int");

                    b.HasKey("productId");

                    b.HasIndex("productsproductId");

                    b.HasIndex("specificationsproductId");

                    b.ToTable("PhoneCreateViewModel");
                });

            modelBuilder.Entity("AllSoldOut.ViewModel.PhoneDetailsViewModel", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cartsguid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("productsproductId")
                        .HasColumnType("int");

                    b.Property<int?>("specificationsproductId")
                        .HasColumnType("int");

                    b.HasKey("productId");

                    b.HasIndex("cartsguid");

                    b.HasIndex("productsproductId");

                    b.HasIndex("specificationsproductId");

                    b.ToTable("PhoneListViewModel");
                });

            modelBuilder.Entity("AllSoldOut.Models.CartItem", b =>
                {
                    b.HasOne("AllSoldOut.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AllSoldOut.Models.PhoneMaker", b =>
                {
                    b.HasOne("AllSoldOut.ViewModel.PhoneCreateViewModel", null)
                        .WithMany("phoneMakers")
                        .HasForeignKey("PhoneCreateViewModelproductId");
                });

            modelBuilder.Entity("AllSoldOut.ViewModel.CheckoutViewModel", b =>
                {
                    b.HasOne("AllSoldOut.Models.Cart", "cart")
                        .WithMany()
                        .HasForeignKey("cartguid");

                    b.HasOne("AllSoldOut.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId");

                    b.HasOne("AllSoldOut.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("AllSoldOut.ViewModel.PhoneCreateViewModel", b =>
                {
                    b.HasOne("AllSoldOut.Models.Product", "products")
                        .WithMany()
                        .HasForeignKey("productsproductId");

                    b.HasOne("AllSoldOut.Models.Specifications", "specifications")
                        .WithMany()
                        .HasForeignKey("specificationsproductId");
                });

            modelBuilder.Entity("AllSoldOut.ViewModel.PhoneDetailsViewModel", b =>
                {
                    b.HasOne("AllSoldOut.Models.Cart", "carts")
                        .WithMany()
                        .HasForeignKey("cartsguid");

                    b.HasOne("AllSoldOut.Models.Product", "products")
                        .WithMany()
                        .HasForeignKey("productsproductId");

                    b.HasOne("AllSoldOut.Models.Specifications", "specifications")
                        .WithMany()
                        .HasForeignKey("specificationsproductId");
                });
#pragma warning restore 612, 618
        }
    }
}
